# Print Rules
print("\n           ** ** ** TIC-TAC-TOE ** ** ** \n\n"
      "                    --- --- --- \n"
      "                   | 1 | 2 | 3 |\n"
      "                    --- --- --- \n"
      "                   | 4 | 5 | 6 |\n"
      "                    --- --- --- \n"
      "                   | 7 | 8 | 9 |\n"
      "                    --- --- ---")


# default board values:
board = [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]]


# defining function to clear board:
def clear_board():
    global board
    board = [[0, 0, 0],
             [0, 0, 0],
             [0, 0, 0]]


# dictionary to navigate through indexes:
converter = {
    'P1': '00',
    'P2': '01',
    'P3': '02',
    'P4': '10',
    'P5': '11',
    'P6': '12',
    'P7': '20',
    'P8': '21',
    'P9': '22',
}


# Display Board (db) converting function (in order to convert board readings to 'X' or 'O'):
def db(row, col):
    if (board[row][col]) == 1:
        return "X"
    elif (board[row][col]) == 2:
        return "O"
    elif (board[row][col]) == 0:
        return " "


# prints board with updated values:
def print_board():
    print(' ---' * 3 + "\n" +

          '| ' + str(db(0, 0)) + ' | ' + str(db(0, 1)) + ' | ' + str(db(0, 2)) + ' |' + "\n" +
          ' ---' * 3 + "\n" +
          '| ' + str(db(1, 0)) + ' | ' + str(db(1, 1)) + ' | ' + str(db(1, 2)) + ' |' + "\n" +
          ' ---' * 3 + "\n" +
          '| ' + str(db(2, 0)) + ' | ' + str(db(2, 1)) + ' | ' + str(db(2, 2)) + ' |' + "\n" +
          ' ---' * 3)


# Set default score values:
player1score = 0
player2score = 0
game_over = False


# Print score function:
def print_score():
    return print("     Player 1 : " + str(player1score) + " wins" +
                 "     Player 2 : " + str(player2score) + " wins" + "\n")


print_score()


# this function contains all winning scenarios (including ending the game if a player reaches a score of3)
def apply_rules():
    global player1score
    global player2score
    global board
    global game_over

    # **** **** **** **** **** **** **** **** **** **** **** **** ****
    # HORIZONTAL CASES

    # Each block contains a winning scenario by indexing through the board (list of lists)
    if board[0][0] == board[0][1] == board[0][2] and board[0][0] + board[0][1] + board[0][2] != 0:
        if (board[0][0] + board[0][1] + board[0][2]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[0][0] + board[0][1] + board[0][2]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    if board[1][0] == board[1][1] == board[1][2] and board[1][0] + board[1][1] + board[1][2] != 0:
        if (board[1][0] + board[1][1] + board[1][2]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[1][0] + board[1][1] + board[1][2]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    if board[2][0] == board[2][1] == board[2][2] and board[2][0] + board[2][1] + board[2][2] != 0:
        if (board[2][0] + board[2][1] + board[2][2]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[2][0] + board[2][1] + board[2][2]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    # **** **** **** **** **** **** **** **** **** **** **** **** ****
    # VERTICAL CASES

    if board[0][0] == board[1][0] == board[2][0] and board[0][0] + board[1][0] + board[2][0] != 0:
        if (board[0][0] + board[1][0] + board[2][0]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[0][0] + board[1][0] + board[2][0]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    if board[0][1] == board[1][1] == board[2][1] and board[0][1] + board[1][1] + board[2][1] != 0:
        if (board[0][1] + board[1][1] + board[2][1]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[0][1] + board[1][1] + board[2][1]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    if board[0][2] == board[1][2] == board[2][2] and board[0][2] + board[1][2] + board[2][2] != 0:
        if (board[0][2] + board[1][2] + board[2][2]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[0][2] + board[1][2] + board[2][2]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    # **** **** **** **** **** **** **** **** **** **** **** **** ****
    # DIAGONAL CASES

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] + board[1][1] + board[2][2] != 0:
        if (board[0][0] + board[1][1] + board[2][2]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[0][0] + board[1][1] + board[2][2]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] + board[1][1] + board[2][0] != 0:
        if (board[0][2] + board[1][1] + board[2][0]) == 3:
            print('Player 1 Wins')
            player1score += 1
            print_score()
            clear_board()

        if (board[0][2] + board[1][1] + board[2][0]) == 6:
            print('Player 2 Wins')
            player2score += 1
            print_score()
            clear_board()

    if player1score == 3 or player2score == 3:
        print("            Game-Over")
        game_over = True


# # # # Player 1
while player1score < 3 and player2score < 3:
    if game_over is False:
        if any(0 in sublist for sublist in board):
            successful_p1 = False
            while successful_p1 is False:
                try:
                    if player2score == 3:
                        break
                    else:
                        play1 = "P" + input(
                            "Player 1, your turn.\n"
                            "Please Enter the position where you want your 'X' to be : ")

                        if board[int(converter[play1][0])][int(converter[play1][1])] == 0:
                            board[int(converter[play1][0])][int(converter[play1][1])] = 1
                            successful_p1 = True
                            print_board()

                        elif board[int(converter[play1][0])][int(converter[play1][1])] != 0:
                            print("Please enter a digit that matches an empty place\n")

                except KeyError:
                    print("Please enter a digit between 1 & 9.\n")

        else:
            print("It's a draw")
            clear_board()
            print_board()

        apply_rules()

    # # # # Player 2
    if game_over is False:
        if any(0 in sublist for sublist in board):
            successful_p2 = False
            while successful_p2 is False:
                try:
                    if player1score == 3:
                        break
                    else:
                        play2 = "P" + input(
                            "Player 2, your turn.\n"
                            "Please Enter the position where you want your 'O' to be : ")

                        if board[int(converter[play2][0])][int(converter[play2][1])] == 0:
                            board[int(converter[play2][0])][int(converter[play2][1])] = 2
                            successful_p2 = True
                            print_board()

                        elif board[int(converter[play2][0])][int(converter[play2][1])] != 0:
                            print("Please enter a digit that matches an empty place\n")

                except KeyError:
                    print("Please enter a digit between 1 & 9.\n")

        else:
            print("It's a draw")
            clear_board()
            print_board()

        apply_rules()
